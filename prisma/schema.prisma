// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  timezone      String    @default("UTC")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts         Account[]
  sessions         Session[]
  settings         Settings?
  tasks            Task[]
  pomodoroSessions PomodoroSession[]
  webhookDeliveries WebhookDelivery[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Settings {
  id              String @id @default(cuid())
  userId          String @unique
  pomodoroLen     Int    @default(25) // minutes
  shortBreak      Int    @default(5)  // minutes
  longBreak       Int    @default(15) // minutes
  longEvery       Int    @default(4)  // every N pomodoros
  webhookUrl      String?
  webhookSecret   String?
  soundEnabled    Boolean @default(true)
  notificationEnabled Boolean @default(true)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id        String   @id @default(cuid())
  userId    String
  title     String
  notes     String?
  priority  Priority @default(MEDIUM)
  tags      String   @default("") // JSON string array
  estimate  Int      @default(1)  // estimated pomodoros
  status    TaskStatus @default(TODO)
  dueAt     DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  pomodoroSessions PomodoroSession[]
}

model PomodoroSession {
  id        String   @id @default(cuid())
  userId    String
  taskId    String?
  startAt   DateTime
  endAt     DateTime?
  status    SessionStatus @default(RUNNING)
  actualSec Int?
  type      SessionType   @default(POMODORO)
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  task              Task?             @relation(fields: [taskId], references: [id], onDelete: SetNull)
  webhookDeliveries WebhookDelivery[]
}

model WebhookDelivery {
  id           String   @id @default(cuid())
  userId       String
  sessionId    String
  event        String
  status       DeliveryStatus @default(PENDING)
  attempts     Int      @default(0)
  lastError    String?
  lastTriedAt  DateTime?
  payload      String   // JSON payload
  createdAt    DateTime @default(now())
  
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  session PomodoroSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  TODO
  DONE
}

enum SessionStatus {
  RUNNING
  COMPLETED
  CANCELED
}

enum SessionType {
  POMODORO
  SHORT_BREAK
  LONG_BREAK
}

enum DeliveryStatus {
  PENDING
  SUCCESS
  FAILED
}